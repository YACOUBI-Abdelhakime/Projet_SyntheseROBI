package exercice4;

 import java.awt.Color;

/*
	(space setColor black)  
	(robi setColor yellow) 
	(space sleep 2000) 
	(space setColor white)  
	(space sleep 1000) 	
	(space add robi (GRect new))
	(robi setColor green)
	(robi translate 100 50)
	(space del robi)
	(robi setColor red)		  
	(space sleep 1000)
	(robi translate 100 0)
	(space sleep 1000)
	(robi translate 0 50)
	(space sleep 1000)
	(robi translate -100 0)
	(space sleep 1000)
	(robi translate 0 -40) ) 
	
	
(space add robi (rect.class new))
(robi translate 130 50)
(robi setColor yellow)
(space add momo (oval.class new))
(momo setColor red)
(momo translate 80 80)
(space add pif (image.class new alien.gif))
(pif translate 100 0)
(space add hello (label.class new "Hello world"))
(hello translate 10 10)
(hello setColor black)

*/


import java.awt.Dimension;
import java.awt.Font;
import java.awt.Point;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import exercice4.Exercice4_1_0.Command;
import exercice4.Exercice4_1_0.Reference;
import graphicLayer.GElement;
import graphicLayer.GImage;
import graphicLayer.GOval;
import graphicLayer.GRect;
import graphicLayer.GSpace;
import graphicLayer.GString;
import stree.parser.SNode;
import stree.parser.SParser;
import tools.Tools;


/*
class NewElement implements Command {
	public Reference run(Reference reference, SNode method) {
		try {
			@SuppressWarnings("unchecked")
			GElement e = ((Class<GElement>) reference.getReceiver()).getDeclaredConstructor().newInstance();
			Reference ref = new Reference(e);
			ref.addCommand("setColor", new SetColor());
			ref.addCommand("translate", new Translate());
			ref.addCommand("setDim", new SetDim());
			return ref;
		} catch (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException
				| NoSuchMethodException | SecurityException e) {
			e.printStackTrace();
		}
		return null;
	}
}
*/

public class Exercice4_2_0 {
	// Une seule variable d'instance
	Environment environment = new Environment();
	GSpace space = new GSpace("Exercice 4", new Dimension(200, 100));

	public Exercice4_2_0() {
		space.open();

		Reference spaceRef = new Reference(space);
		Reference rectClassRef = new Reference(GRect.class);
		Reference ovalClassRef = new Reference(GOval.class);
		Reference imageClassRef = new Reference(GImage.class);
		Reference stringClassRef = new Reference(GString.class);

		spaceRef.addCommand("setColor", new SetColor());
		spaceRef.addCommand("sleep", new Sleep());

		spaceRef.addCommand("add", new AddElement());
		spaceRef.addCommand("del", new DelElement());
		
		rectClassRef.addCommand("new", new NewElement());
		ovalClassRef.addCommand("new", new NewElement());
		imageClassRef.addCommand("new", new NewImage());
		stringClassRef.addCommand("new", new NewString());

		environment.addReference("space", spaceRef);
		environment.addReference("rect.class", rectClassRef);
		environment.addReference("oval.class", ovalClassRef);
		environment.addReference("image.class", imageClassRef);
		environment.addReference("label.class", stringClassRef);
		
		this.mainLoop();
	}
	
	private void mainLoop() {
		while (true) {
			// prompt
			System.out.print("> ");
			// lecture d'une serie de s-expressions au clavier (return = fin de la serie)
			String input = Tools.readKeyboard();
			// creation du parser
			SParser<SNode> parser = new SParser<>();
			// compilation
			List<SNode> compiled = null;
			try {
				compiled = parser.parse(input);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			// execution des s-expressions compilees
			Iterator<SNode> itor = compiled.iterator();
			while (itor.hasNext()) {
				new Interpreter().compute(environment, itor.next());
			}
		}
	}

	public interface Command {
		// le receiver est l'objet qui va executer method
		// method est la s-expression resultat de la compilation
		// du code source a executer
		// exemple de code source : "(space setColor black)"
		abstract public Reference run(Reference receiver, SNode method);
	}

	public class Reference {
		Object receiver;
		Map<String, Command> primitives;

		public Reference(Object receiver) {

			this.receiver = receiver;
			primitives = new HashMap<String, Command>();
		}

		Command getCommandByName(String selector) {
			Command c;
			c = primitives.get(selector);
			return c;
		}

		public void addCommand(String selector, Command primitive) {
			primitives.put(selector, primitive);
		}

		public void run(SNode expr) {
			Command cmd;
			cmd = primitives.get(expr.get(1).contents());
			try {
			cmd.run(this, expr);
			}catch(Exception e) {
				System.err.println("Error : la s_expression n'est pas cohérante !!");
			}
		}

		public Object getReceiver() {
			// TODO Auto-generated method stub
			return this.receiver;
		}
	}

	public class Environment {
		HashMap<String, Reference> variables;

		public Environment() {
			variables = new HashMap<String, Reference>();
		}

		public void addReference(String name, Reference ref) {
			variables.put(name, ref);
		}

		Reference getReferenceByName(String name) {
			Reference ref;
			ref = variables.get(name);

			return ref;

		}
	}
	
	
	public class SetColor implements Command {
		public Reference run(Reference ref, SNode espr) {
			String couleur = espr.get(2).contents().toString();
			Color c = Tools.getColorByName(couleur);
			((GElement) ref.receiver).setColor(c);

			return ref;

		}
	}
	
	public class Sleep implements Command {
		public Reference run(Reference ref, SNode espr) {
			int res1 = Integer.parseInt(espr.get(2).contents());

			// Thread.sleep(res1);
			Tools.sleep(res1);

			return ref;

		}
	}
	public class Translate implements Command {
		public Reference run(Reference ref, SNode espr) {
			int res1 = Integer.parseInt(espr.get(2).contents());
			int res2 = Integer.parseInt(espr.get(3).contents());
			((GElement) ref.receiver).translate(new Point(res1, res2));

			return ref;

		}
	}
	
	class NewElement implements Command {
		public Reference run(Reference reference, SNode method) {
			try {
				@SuppressWarnings("unchecked")
				GElement e = ((Class<GElement>) reference.getReceiver()).getDeclaredConstructor().newInstance();
				Reference ref = new Reference(e);
				ref.addCommand("setColor", new SetColor());
				ref.addCommand("translate", new Translate());
				//ref.addCommand("setDim", new SetDim());
				return ref;
			} catch (Exception e) {
				e.printStackTrace();
			}
			return null;
		}
	}
	
	class NewImage implements Command {
		public Reference run(Reference reference, SNode method) {
			try {
				@SuppressWarnings("unchecked")
				//GElement e = ((Class<GElement>) reference.getReceiver()).getDeclaredConstructor().newInstance();
				GImage e = new GImage(null);
				e.setPosition(new Point(70,10));
				Reference ref = new Reference(e);
				ref.addCommand("translate", new Translate());
				//ref.addCommand("setDim", new SetDim());
				return ref;
			} catch (Exception e) {
				e.printStackTrace();
			}
			return null;
		}
	}
	
	class NewString implements Command {
		public Reference run(Reference reference, SNode method) {
			try {
				@SuppressWarnings("unchecked")
				GString e = new GString("+++test-str+++");
				e.setColor(Color.red);
				e.setPosition(new Point(20,10));
				e.setFont(new Font("Arial",Font.BOLD, 18));
				
				Reference ref = new Reference(e);
				ref.addCommand("setColor", new SetColor());
				ref.addCommand("translate", new Translate());
				//ref.addCommand("setDim", new SetDim());
				return ref;
			} catch (Exception e) {
				e.printStackTrace();
			}
			return null;
		}
	}
	
	class AddElement implements Command {
		public Reference run(Reference reference, SNode method) {
			Reference refSpace = environment.getReferenceByName("space");
			
			return null;
		}
	}
	
	class DelElement implements Command {
		public Reference run(Reference reference, SNode method) {
			Reference refSpace = environment.getReferenceByName("space");
			refSpace.add
			return null;
		}
	}
	
	
	
	
	
	
	
	
	public static void main(String[] args) {
		new Exercice4_2_0();
	}

}